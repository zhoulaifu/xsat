(set-logic QF_FP)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status unknown)
;; MathSAT API call trace
;; generated on 05/20/15 17:24:51

(declare-sort U0 0)
(declare-fun x () (_ FloatingPoint 8 24))
(declare-fun y () (_ FloatingPoint 8 24))
(define-fun _t_3 () RoundingMode RNE)
(define-fun _t_10 () (_ FloatingPoint 8 24) (fp #b0 #b10000000 #b10000000000000000000000))
(define-fun _t_11 () (_ FloatingPoint 8 24) x)
(define-fun _t_12 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_11 _t_11))
(define-fun _t_13 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_11 _t_12))
(define-fun _t_14 () (_ FloatingPoint 8 24) y)
(define-fun _t_15 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_14 _t_14))
(define-fun _t_16 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_14 _t_15))
(define-fun _t_17 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_13 _t_16))
(define-fun _t_18 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_11 _t_14))
(define-fun _t_19 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_10 _t_18))
(define-fun _t_20 () Bool (fp.leq _t_19 _t_17))
(assert _t_20)
(define-fun _t_22 () (_ FloatingPoint 8 24) (fp #b0 #b01111011 #b10011001100110011001101))
(define-fun _t_23 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_12 _t_15))
(define-fun _t_24 () Bool (fp.leq _t_22 _t_23))
(assert _t_24)
(define-fun _t_26 () (_ FloatingPoint 8 24) (fp #b0 #b10000001 #b00000000000000000000000))
(define-fun _t_28 () (_ FloatingPoint 8 24) (fp #b0 #b01111111 #b00000000000000000000000))
(define-fun _t_29 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_11 _t_28))
(define-fun _t_30 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_11 _t_29))
(define-fun _t_31 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_15 _t_30))
(define-fun _t_32 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_23 _t_31))
(define-fun _t_33 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_18 _t_26))
(define-fun _t_34 () Bool (fp.leq _t_32 _t_33))
(assert _t_34)
(define-fun _t_36 () (_ FloatingPoint 8 24) (fp #b1 #b10000000 #b10000000000000000000000))
(define-fun _t_37 () Bool (fp.leq _t_11 _t_10))
(define-fun _t_38 () Bool (fp.leq _t_36 _t_11))
(define-fun _t_39 () Bool (and _t_37 _t_38))
(assert _t_39)
(define-fun _t_40 () Bool (fp.leq _t_14 _t_10))
(define-fun _t_41 () Bool (fp.leq _t_36 _t_14))
(define-fun _t_42 () Bool (and _t_40 _t_41))
(assert _t_42)
(check-sat)
