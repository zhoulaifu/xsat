(set-logic QF_FP)
(set-info :smt-lib-version 2.0)
(set-info :category "crafted")
(set-info :source |Alberto Griggio <griggio@fbk.eu>. These benchmarks were used for the evaluation in the following paper: L. Haller, A. Griggio, M. Brain, D. Kroening: Deciding floating-point logic with systematic abstraction. FMCAD 2012. Real-numbered literals have been automatically translated by MathSAT|)
(set-info :status unknown)
;; MathSAT API call trace
;; generated on 05/20/15 17:24:54

(declare-fun |c::main::1::IN!0@1#0| () (_ FloatingPoint 8 24))
(define-fun _t_3 () RoundingMode RNE)
(define-fun _t_9 () (_ FloatingPoint 8 24) |c::main::1::IN!0@1#0|)
(define-fun _t_11 () (_ FloatingPoint 8 24) (fp #b0 #b01111111 #b10010010000111111011010))
(define-fun _t_12 () Bool (fp.lt _t_9 _t_11))
(define-fun _t_14 () (_ FloatingPoint 8 24) (fp #b1 #b01111111 #b10010010000111111011010))
(define-fun _t_15 () Bool (fp.lt _t_14 _t_9))
(define-fun _t_16 () Bool (and _t_12 _t_15))
(define-fun _t_17 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_9 _t_9))
(define-fun _t_18 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_9 _t_17))
(define-fun _t_20 () (_ FloatingPoint 8 24) (fp #b0 #b10000001 #b10000000000000000000000))
(define-fun _t_21 () (_ FloatingPoint 8 24) (fp.div _t_3 _t_18 _t_20))
(define-fun _t_22 () (_ FloatingPoint 8 24) (fp.neg _t_21))
(define-fun _t_23 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_9 _t_22))
(define-fun _t_24 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_9 _t_18))
(define-fun _t_25 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_9 _t_24))
(define-fun _t_27 () (_ FloatingPoint 8 24) (fp #b0 #b10000101 #b11100000000000000000000))
(define-fun _t_28 () (_ FloatingPoint 8 24) (fp.div _t_3 _t_25 _t_27))
(define-fun _t_29 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_23 _t_28))
(define-fun _t_30 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_9 _t_25))
(define-fun _t_31 () (_ FloatingPoint 8 24) (fp.mul _t_3 _t_9 _t_30))
(define-fun _t_33 () (_ FloatingPoint 8 24) (fp #b0 #b10001011 #b00111011000000000000000))
(define-fun _t_34 () (_ FloatingPoint 8 24) (fp.div _t_3 _t_31 _t_33))
(define-fun _t_35 () (_ FloatingPoint 8 24) (fp.add _t_3 _t_29 _t_34))
(define-fun _t_36 () (_ FloatingPoint 11 53) ((_ to_fp 11 53) _t_3 _t_35))
(define-fun _t_38 () (_ FloatingPoint 11 53) (fp #b0 #b01111111110 #b1111101011100001010001111010111000010100011110101101))
(define-fun _t_39 () Bool (fp.leq _t_36 _t_38))
(define-fun _t_40 () Bool (not _t_39))
(define-fun _t_41 () Bool (and _t_16 _t_40))
(assert _t_41)
(check-sat)
